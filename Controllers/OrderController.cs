using System;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ProjectC_v2.Database;
using ProjectC_v2.Models;
using ProjectC_v2.Models.ServerModels;
using ProjectC_v2.Models.ViewModels;
using ProjectC_v2.Services;

namespace ProjectC_v2.Controllers
{
    public sealed partial class OrderController : Controller
    {
        private WebshopDbContext _db;

        public OrderController(WebshopDbContext db)
        {
            _db = db;
        }
        // GET
        [Authorize]
        public IActionResult GetOrders()
        {
            string guidString = User.Claims.Where(claim => claim.Type == ClaimTypes.Sid).Select(s => s.Value)
                .SingleOrDefault();
            if (Guid.TryParse(guidString, out Guid userId))
            {
                return Ok(OrderService.GetOrders(userId , _db).Reverse());
            }
            else return BadRequest();
        }

        public async Task<IActionResult> GenerateOrder([Bind("TransactionInfoId , Street , PostalCode , City , IBAN , Email")] OrderTransactionViewModel orderTransactionViewModel)
        {
            if (ModelState.IsValid)
            {
                if (Request.Cookies.TryGetValue("ShoppingCart", out string value))
                {
                    if (ShoppingCartService.CookieToShoppingCart(value, out ShoppingCartCookie shoppingCartCookie))
                    {
                        ShoppingCart shoppingCart = await ShoppingCartService.CookieToShoppingCartAsync(shoppingCartCookie, _db);
                        if (shoppingCart.ShoppingCartItems.Count > 0)
                        {
                            if(OrderService.OrderShoppingCart(shoppingCart, orderTransactionViewModel, _db , User))
                            {   
                                OrderService.SendConfirmEmail(shoppingCart , orderTransactionViewModel).Wait();
                                Response.Cookies.Delete("ShoppingCart");
                                return Redirect("/");
                            }
                        }
                    }
                }
            }
            return BadRequest("Something went wrong while generating your order , we are very sorry for this.");
        }
        public async Task<IActionResult> PlaceOrder()
        {
            if (Request.Cookies.TryGetValue("ShoppingCart", out string value))
            {
                if (ShoppingCartService.CookieToShoppingCart(value, out ShoppingCartCookie shoppingCartCookie))
                {
                    ShoppingCart shoppingCart = await ShoppingCartService.CookieToShoppingCartAsync(shoppingCartCookie, _db);
                    if(shoppingCart.ShoppingCartItems.Count > 0)
                    {
                        ViewBag.Products = shoppingCart.ShoppingCartItems.ToList();
                        return View();
                    }
                    Response.Cookies.Delete("ShoppingCart");
                    return Redirect("ShoppingCart");
                }
                else
                {
                    Response.Cookies.Delete("ShoppingCart");
                    return Redirect("ShoppingCart");
                }
            }
            return Redirect("/ShoppingCart");
        }

        [Authorize]
        public IActionResult PlaceOrderWishList()
        {
            ShoppingCart shoppingCart = ShoppingCartService.ShoppingCartWishList(User , _db);
            if (shoppingCart.ShoppingCartItems.Count > 0)
            {
                ViewBag.Products = shoppingCart.ShoppingCartItems.ToList();
                return View();
            }
            return Redirect("/ShoppingCart");
        }

        [Authorize]
        public IActionResult GenerateOrderWishList([Bind("TransactionInfoId , Street , PostalCode , City , IBAN , Email")] OrderTransactionViewModel orderTransactionViewModel)
        {
            if (ModelState.IsValid)
            {
                ShoppingCart shoppingCart = ShoppingCartService.ShoppingCartWishList(User, _db);
                if (shoppingCart.ShoppingCartItems.Count > 0)
                {
                    if(OrderService.OrderShoppingCart(shoppingCart, orderTransactionViewModel, _db, User))
                    {
                        OrderService.SendConfirmEmail(shoppingCart , orderTransactionViewModel).Wait();
                        WishListService.RemoveWishList(User , _db);
                        return Redirect("/");
                    }
                }
            }
            return BadRequest("Something went wrong while generating your order , we are very sorry for this.");
        }
    }
    /// <summary>
    /// Code generated by Visual Studio , Be aware , can be altered to suffice specific requests.
    /// </summary>
    public sealed partial class OrderController : Controller
    {
        [Authorize(Roles ="Admin")]
        // GET: Orders
        public async Task<IActionResult> Index()
        {
            var orders = _db.Order.Include(o => o.OrderStatus);
            foreach(Order order in orders)
            {
                order.User = await _db.User.FirstOrDefaultAsync(id => id.UserId == order.UserId);
            }
            return View(await orders.ToListAsync());
        }
        [Authorize(Roles = "Admin")]
        // GET: Orders/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var order = await _db.Order
                .Include(o => o.OrderStatus)
                //.Include(o => o.User)
                .FirstOrDefaultAsync(m => m.OrderId == id);
            if (order == null)
            {
                return NotFound();
            }
            order.User = await _db.User.FirstOrDefaultAsync(u => u.UserId == order.UserId);
            if(order.User == null)
            {
                order.User = new User()
                {
                    Email = "Anonymous",
                    Name = "Anonymous",
                    Surname = "Anoymous",
                };
            }
            return View(order);
        }
        [Authorize(Roles = "Admin")]
        // GET: Orders/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var order = await _db.Order.FindAsync(id);
            if (order == null)
            {
                return NotFound();
            }
            order.User = await _db.User.FirstOrDefaultAsync(u => u.UserId == order.UserId);
            if (order.User == null)
            {
                order.User = new User()
                {
                    Email = "Anonymous",
                    Name = "Anonymous",
                    Surname = "Anoymous",
                };
            }
            ViewData["StatusId"] = new SelectList(_db.OrderStatus, "StatusId", "StatusName", order.StatusId);
            ViewData["UserId"] = new SelectList(_db.User, "UserId", "Email", order.UserId);
            return View(order);
        }

        // POST: Orders/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int id, [Bind("OrderId,UserId,Date,StatusId,Street,PostalCode,City")] Order order)
        {
            if (id != order.OrderId)
            {
                return NotFound();
            }
            ModelState.Remove("StatusId");
            if (ModelState.IsValid)
            {
                try
                {
                    _db.Update(order);
                    await _db.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!OrderExists(order.OrderId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["StatusId"] = new SelectList(_db.OrderStatus, "StatusId", "StatusName", order.StatusId);
            ViewData["UserId"] = new SelectList(_db.User, "UserId", "Email", order.UserId);
            return View(order);
        }
        [Authorize(Roles = "Admin")]
        // GET: Orders/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var order = await _db.Order
                .Include(o => o.OrderStatus)
                .Include(o => o.User)
                .FirstOrDefaultAsync(m => m.OrderId == id);
            if (order == null)
            {
                return NotFound();
            }

            return View(order);
        }

        // POST: Orders/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var order = await _db.Order.FindAsync(id);
            _db.Order.Remove(order);
            await _db.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool OrderExists(int id)
        {
            return _db.Order.Any(e => e.OrderId == id);
        }
    }
}