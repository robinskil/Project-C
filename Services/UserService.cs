using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using ProjectC_v2.Database;
using ProjectC_v2.Helpers;
using ProjectC_v2.Models;
using ProjectC_v2.Models.ViewModels;

namespace ProjectC_v2.Services
{
    public static class UserService
    {
        /// <summary>
        /// Registers a new user to the database , checks if the user already exists , also hashes the password
        /// </summary>
        /// <param name="user"></param>
        /// <param name="db"></param>
        /// <returns>true if succeeded or false if failed</returns>
        public static bool Register(User user, WebshopDbContext db)
        {
            //if email exists then return false indicating that no user could be created
            if (!db.User.Any(u => user.Email == u.Email))
            {
                //hash the password here
                user.Password = Hashing.HashPassword(user.Password);
                user.CityId = 1;
                user.RoleId = 1;
                try
                {
                    db.User.Add(user);
                    db.SaveChanges();
                    return true;
                }
                catch (DbUpdateException e)
                {
                    Debug.WriteLine(e.StackTrace);
                    return false;
                }
            }
            return false;
        }

        /// <summary>
        /// Performs a login towards the in proc session server.
        /// </summary>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="db"></param>
        /// <param name="claims"></param>
        /// <returns>returns true on succeeded or false on failed..., also puts out an SessionId that is generated by the session handler</returns>
        public static bool Login(string email, string password, WebshopDbContext db, out List<Claim> claims)
        {
            User user = db.User.Include(role => role.UserRole).FirstOrDefault(u => u.Email == email);
            if (user != null && Hashing.ValidatePassword(password, user.Password))
            {
                claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Sid , user.UserId.ToString()),
                    new Claim(ClaimTypes.Role , user.UserRole.RoleName)
                };
                return true;
            }
            claims = default(List<Claim>);
            return false;
        }

        public static User GetUser(Guid userId, WebshopDbContext db)
        {
            return db.User.FirstOrDefault(u => u.UserId == userId);
        }

        public static bool UserExists(Guid id, WebshopDbContext db)
        {
            return db.User.Any(e => e.UserId == id);
        }

        public static bool ChangePassword(ClaimsPrincipal user, string password, WebshopDbContext db)
        {
            string guidString = user.Claims.Where(claim => claim.Type == ClaimTypes.Sid).Select(s => s.Value).SingleOrDefault();
            if (!Guid.TryParse(guidString, out Guid userId))
            {
                return false;
            }
            User u = UserService.GetUser(userId, db);
            u.Password = Hashing.HashPassword(password);
            db.Update(u);
            db.SaveChanges();
            return true;
        }

        public static bool ChangeAddress(ClaimsPrincipal user, ChangeAddressViewModel addressViewModel, WebshopDbContext db)
        {
            string guidString = user.Claims.Where(claim => claim.Type == ClaimTypes.Sid).Select(s => s.Value).SingleOrDefault();
            if (!Guid.TryParse(guidString, out Guid userId))
            {
                return false;
            }
            User u = UserService.GetUser(userId, db);
            u.Street = addressViewModel.Street;
            u.PostalCode = addressViewModel.PostalCode;
            db.Update(u);
            db.SaveChanges();
            return true;
        }

        public static bool ChangeName(ClaimsPrincipal user, ChangeNameViewModel nameViewModel, WebshopDbContext db)
        {
            string guidString = user.Claims.Where(claim => claim.Type == ClaimTypes.Sid).Select(s => s.Value).SingleOrDefault();
            if (!Guid.TryParse(guidString, out Guid userId))
            {
                return false;
            }
            User u = UserService.GetUser(userId, db);
            u.Name = nameViewModel.Name;
            u.Surname = nameViewModel.Surname;
            db.Update(u);
            db.SaveChanges();
            return true;
        }

        /// <summary>
        /// false is okay , true is cannot perform action
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="email"></param>
        /// <param name="db"></param>
        /// <returns></returns>
        public static async Task<bool> EmailExistsExceptOwn(Guid userId, string email, WebshopDbContext db)
        {
            if (await db.User.AnyAsync(u => u.Email == email && u.UserId == userId))
            {
                return false;
            }
            return await db.User.AnyAsync(u => u.Email == email);
        }
        public static bool EmailExists(string email, WebshopDbContext db)
        {
            return db.User.Any(u => u.Email == email);
        }
    }
}